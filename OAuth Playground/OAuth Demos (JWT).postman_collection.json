{
	"info": {
		"_postman_id": "15da081a-869d-f505-4421-8354f035d470",
		"name": "OAuth Demos (JWT)",
		"description": "This collection is a \"pure\" OAuth set of calls that has no UI wrapped around the request \\ response that mimic OAuth Playground for PingFed.\n\nCalls that require a Web Browser (AuthZ Code or Implicit) are marked \"(Browser)\" these calls should be pasted into a Web Browser to be completed - this is to bypass any UI that Postman uses with the Authorization --> OAuth 2.0 mechanism.\n\nUpdate: 11/25/18\nAdded the following flows:\n    SAML Bearer\n    JWT Bearer\n    Device Flow (PF 9.2+)\nAdded examples using x-www-form-urlencoded body for call parameters\nOrganized calls a little better\nIndicated PF versions for more recent support\n\nUpdate: 11/26/18\nAdded Scope parameter \\ field to all requests\nAdded Client Credential with client_assertion JWT flow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "OAuth Token Requests",
			"item": [
				{
					"name": "User Authentication",
					"item": [
						{
							"name": "AuthZ Code",
							"item": [
								{
									"name": "OAuth Demo - AuthZ - Get AuthZ Code (Browser)",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "https://{{pingfed}}/as/authorization.oauth2?response_type=code&client_id={{authz_client}}&redirect_uri={{redirect_uri}}&scope=",
											"protocol": "https",
											"host": [
												"{{pingfed}}"
											],
											"path": [
												"as",
												"authorization.oauth2"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "{{authz_client}}"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_uri}}"
												},
												{
													"key": "scope",
													"value": ""
												}
											]
										},
										"description": "Demonstrates a regular Authorization Code request.\n\nThe Code will be sent to the redirect_uri value. The code then needs to be posted to the AS to receive an access_token."
									},
									"response": []
								},
								{
									"name": "OAuth Demo - AuthZ - Swap Code for Token(s)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd800caa-57ad-41f8-b1e4-f9af9a53b000",
												"exec": [
													"pm.test(\"Access Token received\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"access_token\");",
													"    ",
													"    jsonData = pm.response.json();",
													"    pm.environment.set(\"access_token\", jsonData.access_token);",
													"});",
													"",
													"if (jsonData.refresh_token !== \"\") {",
													"    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
													"}",
													"",
													"if (jsonData.id_token !== \"\") {",
													"    pm.environment.set(\"id_token\", jsonData.id_token);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{authz_client}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{pingfed}}/as/token.oauth2?grant_type=authorization_code&redirect_uri={{redirect_uri}}&code=<<Insert Returned AuthZ Code Here>>",
											"protocol": "https",
											"host": [
												"{{pingfed}}"
											],
											"path": [
												"as",
												"token.oauth2"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_uri}}"
												},
												{
													"key": "code",
													"value": "<<Insert Returned AuthZ Code Here>>"
												}
											]
										},
										"description": "Demonstrates the call to swap an AuthZ Code for an access_token"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "AuthZ Code with PKCE (PF 8.4+)",
							"item": [
								{
									"name": "OAuth Demo - AuthZ - Get Code with PKCE (Browser)",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "https://{{pingfed}}/as/authorization.oauth2?response_type=code&client_id={{authz_client}}&redirect_uri={{redirect_uri}}&scope=&code_challenge=Any-string-you-want-between-43-and-128-characters",
											"protocol": "https",
											"host": [
												"{{pingfed}}"
											],
											"path": [
												"as",
												"authorization.oauth2"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "{{authz_client}}"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_uri}}"
												},
												{
													"key": "scope",
													"value": ""
												},
												{
													"key": "code_challenge",
													"value": "Any-string-you-want-between-43-and-128-characters"
												}
											]
										},
										"description": "Demonstrates a regular Authorization Code request.\n\nThe Code will be sent to the redirect_uri value. The code then needs to be posted to the AS to receive an access_token.\n\nThis adds a ?code_challenge= string to the Code request."
									},
									"response": []
								},
								{
									"name": "OAuth Demo - AuthZ - Swap Code for Token(s) with PKCE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd800caa-57ad-41f8-b1e4-f9af9a53b000",
												"exec": [
													"pm.test(\"Access Token received\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"access_token\");",
													"    ",
													"    jsonData = pm.response.json();",
													"    pm.environment.set(\"access_token\", jsonData.access_token);",
													"});",
													"",
													"if (jsonData.refresh_token !== \"\") {",
													"    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
													"}",
													"",
													"if (jsonData.id_token !== \"\") {",
													"    pm.environment.set(\"id_token\", jsonData.id_token);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{authz_client}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {},
										"url": {
											"raw": "https://{{pingfed}}/as/token.oauth2?grant_type=authorization_code&redirect_uri={{redirect_uri}}&code=<<Insert Returned AuthZ Code Here>>&code_verifier=Any-string-you-want-between-43-and-128-characters",
											"protocol": "https",
											"host": [
												"{{pingfed}}"
											],
											"path": [
												"as",
												"token.oauth2"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_uri}}"
												},
												{
													"key": "code",
													"value": "<<Insert Returned AuthZ Code Here>>"
												},
												{
													"key": "code_verifier",
													"value": "Any-string-you-want-between-43-and-128-characters"
												}
											]
										},
										"description": "Demonstrates the call to swap an AuthZ Code for an access_token when the call was made with PKCE.\n\nThe ?code_challenge= value from the previous call needs to be added as the ?code_verifier= parameter "
									},
									"response": []
								}
							],
							"description": "These calls conform to RFC 7636 (https://tools.ietf.org/html/rfc7636) to add additional security into the acquisition of the Authorization Code",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8704110c-607b-4cff-8cbb-df748d80ca2b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a60740b-1923-4937-a808-740c46614c3a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "SAML Bearer",
							"item": [
								{
									"name": "Authenticate User for SAML Assertion (WSTrust)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c63bfc2-7e84-40df-85d5-710f57d696e2",
												"exec": [
													"var xmlTree = xml2Json(responseBody);",
													"",
													"var samlAssertion = xmlTree[\"S11:Envelope\"][\"S11:Body\"][\"ns:RequestSecurityTokenResponseCollection\"][\"ns:RequestSecurityTokenResponse\"][\"ns:RequestedSecurityToken\"][\"wsse:BinarySecurityToken\"]._;",
													"",
													"pm.environment.set(\"samlAssertion\", samlAssertion);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "text/xml",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soap:Header>\n        <wsa:Action xmlns:wsa=\"http://www.w3.org/2005/08/addressing\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" wsu:Id=\"iJFJKoU2cJbfDgjZTwrmZKpS8nKM\">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</wsa:Action>\n        <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" soap:mustUnderstand=\"1\">\n            <wsse:UsernameToken xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" wsu:Id=\"ijhaEN438vD_gRUQC06Apb8B43nE\">\n                <wsse:Username>joe</wsse:Username>\n                <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">2Federate</wsse:Password>\n            </wsse:UsernameToken>\n        </wsse:Security>\n    </soap:Header>\n    <soap:Body xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" wsu:Id=\"iGPI7F3OqQHNY_nNdIi6mxp16eqE\">\n        <wst:RequestSecurityToken xmlns:wst=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/\">\n            <wst:TokenType>urn:ietf:params:oauth:grant-type:saml2-bearer</wst:TokenType>\n            <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>\n            <wsp:AppliesTo xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\">\n                <wsa:EndpointReference xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\n                    <wsa:Address>https://{{pingfed}}</wsa:Address>\n                </wsa:EndpointReference>\n            </wsp:AppliesTo>\n            <wst:Claims/>\n            <wst:OnBehalfOf>\n                <wsse:SecurityTokenReference xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n                    <wsse:Reference URI=\"#ijhaEN438vD_gRUQC06Apb8B43nE\" ValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#UsernameToken\"/>\n                </wsse:SecurityTokenReference>\n            </wst:OnBehalfOf>\n        </wst:RequestSecurityToken>\n    </soap:Body>\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{pingfed}}/idp/sts.wst",
											"protocol": "https",
											"host": [
												"{{pingfed}}"
											],
											"path": [
												"idp",
												"sts.wst"
											]
										}
									},
									"response": []
								},
								{
									"name": "Swap SAML Assertion for Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5a7b124-f613-4205-b6c8-f0fb0ce3c638",
												"exec": [
													"pm.test(\"Access Token received\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"access_token\");",
													"    ",
													"    jsonData = pm.response.json();",
													"    pm.environment.set(\"access_token\", jsonData.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "saml_client",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:saml2-bearer",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{samlAssertion}}",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{pingfed}}/as/token.oauth2",
											"protocol": "https",
											"host": [
												"{{pingfed}}"
											],
											"path": [
												"as",
												"token.oauth2"
											]
										}
									},
									"response": []
								}
							],
							"description": "Swap a SAML Assertion for an Access Token\n\nThis flow uses a WSTrustSTS call to swap a Username / Password credential for the SAML Assertion",
							"_postman_isSubFolder": true
						},
						{
							"name": "JWT Bearer",
							"item": [
								{
									"name": "Authenticate User for JWT (WSTrust)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c63bfc2-7e84-40df-85d5-710f57d696e2",
												"exec": [
													"var xmlTree = xml2Json(responseBody);",
													"",
													"var returnedToken = xmlTree[\"S11:Envelope\"][\"S11:Body\"][\"ns:RequestSecurityTokenResponseCollection\"][\"ns:RequestSecurityTokenResponse\"][\"ns:RequestedSecurityToken\"][\"wsse:BinarySecurityToken\"]._;",
													"",
													"// Base64 Decode the Token",
													"var decodedToken = CryptoJS.enc.Base64.parse(returnedToken);",
													"var jwtBearer = CryptoJS.enc.Utf8.stringify(decodedToken)",
													"",
													"pm.environment.set(\"jwtBearer\", jwtBearer);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "text/xml",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soap:Header>\n        <wsa:Action xmlns:wsa=\"http://www.w3.org/2005/08/addressing\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" wsu:Id=\"iJFJKoU2cJbfDgjZTwrmZKpS8nKM\">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue</wsa:Action>\n        <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" soap:mustUnderstand=\"1\">\n            <wsse:UsernameToken xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" wsu:Id=\"ijhaEN438vD_gRUQC06Apb8B43nE\">\n                <wsse:Username>joe</wsse:Username>\n                <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">2Federate</wsse:Password>\n            </wsse:UsernameToken>\n        </wsse:Security>\n    </soap:Header>\n    <soap:Body xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" wsu:Id=\"iGPI7F3OqQHNY_nNdIi6mxp16eqE\">\n        <wst:RequestSecurityToken xmlns:wst=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/\">\n            <wst:TokenType>urn:ietf:params:oauth:grant-type:jwt-bearer</wst:TokenType>\n            <wst:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</wst:RequestType>\n            <wsp:AppliesTo xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\">\n                <wsa:EndpointReference xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\n                    <wsa:Address>https://{{pingfed}}</wsa:Address>\n                </wsa:EndpointReference>\n            </wsp:AppliesTo>\n            <wst:Claims/>\n            <wst:OnBehalfOf>\n                <wsse:SecurityTokenReference xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n                    <wsse:Reference URI=\"#ijhaEN438vD_gRUQC06Apb8B43nE\" ValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#UsernameToken\"/>\n                </wsse:SecurityTokenReference>\n            </wst:OnBehalfOf>\n        </wst:RequestSecurityToken>\n    </soap:Body>\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{pingfed}}/idp/sts.wst",
											"protocol": "https",
											"host": [
												"{{pingfed}}"
											],
											"path": [
												"idp",
												"sts.wst"
											]
										}
									},
									"response": []
								},
								{
									"name": "Swap JWT for Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4635664-0899-43e9-8e47-24e18b3ee447",
												"exec": [
													"pm.test(\"Access Token received\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"access_token\");",
													"    ",
													"    jsonData = pm.response.json();",
													"    pm.environment.set(\"access_token\", jsonData.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "jwt_client",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{jwtBearer}}",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{pingfed}}/as/token.oauth2",
											"protocol": "https",
											"host": [
												"{{pingfed}}"
											],
											"path": [
												"as",
												"token.oauth2"
											]
										}
									},
									"response": []
								}
							],
							"description": "Swap a JWT for an Access Token\n\nThis flow uses a WSTrustSTS call to swap a Username / Password credential for the JWT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dbd37b18-8fac-4df6-b908-f5d8055ed581",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b537cf20-cadb-4d2d-8ae0-d50c5dda8bc2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "OAuth Demo - Implicit (Browser)",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "https://{{pingfed}}/as/authorization.oauth2?response_type=token&redirect_uri={{redirect_uri}}&client_id={{implicit_client}}&scope=",
									"protocol": "https",
									"host": [
										"{{pingfed}}"
									],
									"path": [
										"as",
										"authorization.oauth2"
									],
									"query": [
										{
											"key": "response_type",
											"value": "token"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}"
										},
										{
											"key": "client_id",
											"value": "{{implicit_client}}"
										},
										{
											"key": "scope",
											"value": ""
										}
									]
								},
								"description": "Demonstrates an OAuth Implicit call"
							},
							"response": []
						},
						{
							"name": "OAuth Demo - Resource Owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c815082b-f94f-46c4-bfaa-4a3afbd82afc",
										"exec": [
											"pm.test(\"Access Token received\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"access_token\");",
											"    ",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"access_token\", jsonData.access_token);",
											"});",
											"",
											"if (jsonData.refresh_token !== \"\") {",
											"    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{resource_owner}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {},
								"url": {
									"raw": "https://{{pingfed}}/as/token.oauth2?grant_type=password&username=joe&password=2Federate&scope=",
									"protocol": "https",
									"host": [
										"{{pingfed}}"
									],
									"path": [
										"as",
										"token.oauth2"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "joe"
										},
										{
											"key": "password",
											"value": "2Federate"
										},
										{
											"key": "scope",
											"value": ""
										}
									]
								},
								"description": "Demonstrates a Resource Owner call to swap a user credential for an access_token.\n\nTypically, this call should be avoided due to the risks of collecting and storing credentials in the app."
							},
							"response": []
						}
					],
					"description": "These flows involve a User Authentication before an access_token is issued",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "57006f10-c4f9-4af8-9111-951d1b676160",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "812cc2b8-cd46-41b8-a3a0-c1742922606c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Service Authentication",
					"item": [
						{
							"name": "OAuth Demo - Client Credentials (Basic AuthZ Header)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e996932-72ca-4c3d-b565-2b6ff36b6e3b",
										"exec": [
											"pm.test(\"Access Token received\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"access_token\");",
											"    ",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"access_token\", jsonData.access_token);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_credentials}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {},
								"url": {
									"raw": "https://{{pingfed}}/as/token.oauth2?grant_type=client_credentials&scope=",
									"protocol": "https",
									"host": [
										"{{pingfed}}"
									],
									"path": [
										"as",
										"token.oauth2"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										},
										{
											"key": "scope",
											"value": ""
										}
									]
								},
								"description": "Demonstrates an OAuth client_credential call"
							},
							"response": []
						},
						{
							"name": "OAuth Demo - Client Credentials (x-www-form-urlencoded)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e996932-72ca-4c3d-b565-2b6ff36b6e3b",
										"exec": [
											"pm.test(\"Access Token received\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"access_token\");",
											"    ",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"access_token\", jsonData.access_token);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{client_credentials}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{pingfed}}/as/token.oauth2?grant_type=client_credentials&scope=",
									"protocol": "https",
									"host": [
										"{{pingfed}}"
									],
									"path": [
										"as",
										"token.oauth2"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										},
										{
											"key": "scope",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OAuth Demo - Client Credentials with client_assertion (JWT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e996932-72ca-4c3d-b565-2b6ff36b6e3b",
										"exec": [
											"pm.test(\"Access Token received\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"access_token\");",
											"    ",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ea50f30-7473-41dd-997e-419e80742ed4",
										"exec": [
											"// Sketchy loading of the jsrsasign library into Postman Sandbox",
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"eval(pm.globals.get(\"jsrsasign-js\")); //import javascript jsrsasign",
											"",
											"var currentTime = +new Date(); // the current time in milliseconds",
											"var issuedAtTimeSeconds = currentTime/1000;",
											"var expirationTimeSeconds = currentTime/1000 + 3600;",
											"",
											"// Create Header and Payload objects",
											"var header = {",
											"  \"kid\": pm.environment.get(\"client_assertion_kid\"),",
											"  \"alg\": \"RS256\"",
											"};",
											"",
											"var payload = {",
											"  \"iss\": pm.environment.get(\"client_credentials_jwt\"),",
											"  \"aud\": \"https://\"+pm.environment.get(\"pingfed\")+\"/as/token.oauth2\",",
											"  \"sub\": pm.environment.get(\"client_credentials_jwt\"),",
											"  \"exp\" : Math.ceil(expirationTimeSeconds),",
											"  \"iat\" : Math.ceil(issuedAtTimeSeconds)",
											"};",
											"",
											"// Prep the objects for a JWT",
											"var sHeader = JSON.stringify(header);",
											"var sPayload = JSON.stringify(payload);",
											"",
											"// Use the jsrsasign module to create the signed JWT ",
											"var privateKey = pm.environment.get(\"private_key\");",
											"var password = pm.environment.get(\"keyPassword\");",
											"",
											"var prvKey = KEYUTIL.getKey(privateKey, password);",
											"var sJWT = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, prvKey);",
											"",
											"pm.environment.set(\"client_assertion\", sJWT);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_credentials_jwt}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_assertion}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{pingfed}}/as/token.oauth2",
									"protocol": "https",
									"host": [
										"{{pingfed}}"
									],
									"path": [
										"as",
										"token.oauth2"
									]
								},
								"description": "This call creates a signed JWT that is sent to PF and is swapped for an access_token.\n\nThe signature is handled by a sideloaded library - jsrsasign. The \"Get jsrsasign library\" call should be made to populate the code into a global variable that is invoked at the start of the pre-request script.\n\nA new Client Credential OAuth Client will need to be created so you can import your own keys.\n\nThe client_credential client needs a corresponding JWKS for the public cert - this can be generated here:\nhttps://8gwifi.org/jwkconvertfunctions.jsp\n\nThe generated JWK can be placed into JWKS format by wrapping it with this:\n\n{\n  \"keys\": [\n    << Insert JWK object here >>\n  ]\n}\n\nThe \"kid\" value in the Header should be pulled from this JWK\n\nprivate_key - the encrypted cert as a PEM\nkeyPassword - the password to unlock private_key\n\n"
							},
							"response": []
						},
						{
							"name": "Get jsrsasign library - used for JWT Signing with RSA \\ ECDSA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e8fbd26-7506-4458-893a-abd195448c3d",
										"exec": [
											"pm.globals.set(\"jsrsasign-js\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js",
									"protocol": "http",
									"host": [
										"kjur",
										"github",
										"io"
									],
									"path": [
										"jsrsasign",
										"jsrsasign-latest-all-min.js"
									]
								}
							},
							"response": []
						}
					],
					"description": "These flows involve a Service Authentication before an access_token is issued",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a777dca6-91c9-4a2a-9da8-86e64bd4ecb7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1c7fe43d-6853-4239-a17d-d942c3823e17",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Device Authentication (PF 9.2+)",
					"item": [
						{
							"name": "Get Device Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38e7e7c1-125c-4578-a52f-75abd6dcfe8a",
										"exec": [
											"pm.test(\"Device Code received\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"device_code\");",
											"    ",
											"jsonData = pm.response.json();",
											"pm.environment.set(\"device_code\", jsonData.device_code);",
											"pm.environment.set(\"device_user_code\", jsonData.user_code);",
											"pm.environment.set(\"device_verify\", jsonData.verification_uri);",
											"pm.environment.set(\"device_verify_uri\", jsonData.verification_uri_complete);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "df_client",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{pingfed}}/as/device_authz.oauth2",
									"protocol": "https",
									"host": [
										"{{pingfed}}"
									],
									"path": [
										"as",
										"device_authz.oauth2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Swap Device Code for Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7845185a-1319-4d3f-87ce-b426af4cda0e",
										"exec": [
											"pm.test(\"Access Token received\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"access_token\");",
											"    ",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "df_client",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:device_code",
											"type": "text"
										},
										{
											"key": "device_code",
											"value": "{{device_code}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{pingfed}}/as/token.oauth2",
									"protocol": "https",
									"host": [
										"{{pingfed}}"
									],
									"path": [
										"as",
										"token.oauth2"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Verification - User Code Embedded (Browser)",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{device_verify_uri}}",
									"host": [
										"{{device_verify_uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Verification - User Code Input (Browser)",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{device_verify}}",
									"host": [
										"{{device_verify}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Support for Draft Device Flow - https://tools.ietf.org/html/draft-ietf-oauth-device-flow-13",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "77edf5f1-f29a-4562-a87e-7cbba4326a3e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a82bba3d-9fab-4847-a3c9-30ccf6fa725c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "These calls demonstrate the OAuth 2.0 flows for getting an Access Token.\n\nThe results will depend on how PingFed is configured with the Acces Token Mananger and the Access Token Mappings that are linked to the OAuth clients.\n\nOIDC tokens can be minted by adding the OIDC scopes (openid [address | email | phone | profile]) to the Code \\ Access Token requests.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b081e72c-778c-4a7f-b22e-8dd0704e1e10",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4460821b-0395-4c0a-8ebb-06971a858098",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Token Calls",
			"item": [
				{
					"name": "OAuth Demo - Swap Refresh Token for AT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "829e3367-89cb-46ff-9e7c-61f1a422832e",
								"exec": [
									"pm.test(\"Access Token received\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");",
									"    ",
									"    jsonData = pm.response.json();",
									"    pm.environment.set(\"access_token\", jsonData.access_token);",
									"});",
									"",
									"pm.test(\"Refresh Token received\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"refresh_token\");",
									"    ",
									"    jsonData = pm.response.json();",
									"    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{authz_client}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {},
						"url": {
							"raw": "https://{{pingfed}}/as/token.oauth2?grant_type=refresh_token&redirect_uri={{redirect_uri}}&refresh_token={{refresh_token}}",
							"protocol": "https",
							"host": [
								"{{pingfed}}"
							],
							"path": [
								"as",
								"token.oauth2"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "refresh_token"
								},
								{
									"key": "redirect_uri",
									"value": "{{redirect_uri}}"
								},
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}"
								}
							]
						},
						"description": "Used to swap out a refresh_token for an access_token."
					},
					"response": []
				},
				{
					"name": "OAuth Demo - Token Validation (PingFed)",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{resource_server}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {},
						"url": {
							"raw": "https://{{pingfed}}/as/token.oauth2?grant_type=urn:pingidentity.com:oauth2:grant_type:validate_bearer&token={{access_token}}",
							"protocol": "https",
							"host": [
								"{{pingfed}}"
							],
							"path": [
								"as",
								"token.oauth2"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "urn:pingidentity.com:oauth2:grant_type:validate_bearer"
								},
								{
									"key": "token",
									"value": "{{access_token}}"
								}
							]
						},
						"description": "Sends AT to the RS Client that's tied to the *same* AT Manager in PF"
					},
					"response": []
				},
				{
					"name": "OAuth Demo - Token Introspection (PF 8.2+)",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{resource_server}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {},
						"url": {
							"raw": "https://{{pingfed}}/as/introspect.oauth2?token={{access_token}}",
							"protocol": "https",
							"host": [
								"{{pingfed}}"
							],
							"path": [
								"as",
								"introspect.oauth2"
							],
							"query": [
								{
									"key": "token",
									"value": "{{access_token}}"
								}
							]
						},
						"description": "Support for Token Introspection (RFC 7662) - https://tools.ietf.org/html/rfc7662"
					},
					"response": []
				},
				{
					"name": "OAuth Demo - Revoke Token",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{authz_client}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {},
						"url": {
							"raw": "https://{{pingfed}}/as/revoke_token.oauth2?token={{access_token}}",
							"protocol": "https",
							"host": [
								"{{pingfed}}"
							],
							"path": [
								"as",
								"revoke_token.oauth2"
							],
							"query": [
								{
									"key": "token",
									"value": "{{access_token}}"
								}
							]
						},
						"description": "AT revocation is only directly supported with Internal Reference.\n\nWith JWT, set the \"Access Grant GUID Claim Name\" in the AT Manager - Advanced Options and then revoke the RT"
					},
					"response": []
				},
				{
					"name": "OAuth Demo - Revoke SRI (Backchannel SLO)",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{authz_client}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-XSRF-Header",
								"value": "PingFederate"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\" : \"<insert TID (PF Logs) or SRI (PA Token)>\" }"
						},
						"url": {
							"raw": "https://{{pingfed}}/pf-ws/rest/sessionMgmt/revokedSris/",
							"protocol": "https",
							"host": [
								"{{pingfed}}"
							],
							"path": [
								"pf-ws",
								"rest",
								"sessionMgmt",
								"revokedSris",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "These calls are used when you've already obtained the access_token"
		},
		{
			"name": "Dynamic Client Registation (PF 9.0+)",
			"item": [
				{
					"name": "OAuth Demo - Dynamic Client Registration - Get Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c90d33ae-c3d6-45c5-bf28-172a58700f47",
								"exec": [
									"jsonData = pm.response.json();",
									"pm.environment.set(\"access_token\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_secret",
									"value": "rutaBbRNNg1eSNqihdN8et3K5uwMMNvk9MyvwCyNMrz1nIxMrwPOKjfeYmdvaRAR",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "devRegClient ",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{pingfed}}/as/token.oauth2?grant_type=client_credentials&scope=dev:regClient",
							"protocol": "https",
							"host": [
								"{{pingfed}}"
							],
							"path": [
								"as",
								"token.oauth2"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								},
								{
									"key": "scope",
									"value": "dev:regClient"
								}
							]
						},
						"description": "This call is made to retrieve an access_token that can be used to make a call to the Dynamic Registration Endpoint"
					},
					"response": []
				},
				{
					"name": "OAuth Demo - Dynamic Client Registration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"client_name\":\"My Sample Client\",\n\t\"redirect_uris\": \"https://apps.cpricedomain.net/OAuthDecode\",\n\t\"grant_types\": [\"authorization_code\", \"password\", \"implicit\"],\n\t\"response_types\": \"code token id_token\",\n\t\"scope\": \"openid address email phone profile\"\n}"
						},
						"url": {
							"raw": "https://{{pingfed}}/as/clients.oauth2",
							"protocol": "https",
							"host": [
								"{{pingfed}}"
							],
							"path": [
								"as",
								"clients.oauth2"
							]
						},
						"description": "Used to create an OAuth client with the Dynamic Client Registration endpoint.\n\nRequires an AT with the scope \"dev:regClient\""
					},
					"response": []
				}
			],
			"description": "These calls can be used to show PF support for RFC 7591 - OAuth 2.0 Dynamic Client Registration Protocol (https://tools.ietf.org/html/rfc7591)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a189c6bb-efe4-4164-9d75-ed9880a9f61b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9af8bc30-94a9-405d-8663-c474cdb39b36",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "OIDC Endpoints",
			"item": [
				{
					"name": "OIDC Demo - Configuration Endpoint",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{pingfed}}/.well-known/openid-configuration",
							"protocol": "https",
							"host": [
								"{{pingfed}}"
							],
							"path": [
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Demo - JWKS Endpoint",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{pingfed}}/pf/JWKS",
							"protocol": "https",
							"host": [
								"{{pingfed}}"
							],
							"path": [
								"pf",
								"JWKS"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Demo - UserInfo Endpoint",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{pingfed}}/idp/userinfo.openid",
							"protocol": "https",
							"host": [
								"{{pingfed}}"
							],
							"path": [
								"idp",
								"userinfo.openid"
							]
						},
						"description": "Use access_token in the Authorization: Bearer header to present a User to the UserInfo API.\n\nPF OIDC Policy will use the claims in the AT to figure out th rest of the data.\n\nAttributes in the response will be tied to the AT scopes - minimally must be \"openid\""
					},
					"response": []
				}
			],
			"description": "These calls are the endpoints for OIDC when PingFed is configured as an OpenID Connect Provider (Server Configuration --> Server Settings --> Roles & Protocols --> Enable OAuth2 Authorization Role --> OpenID Connect)"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9cefc420-7a65-430f-91f3-1cd49ff5764f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "79778f22-daaa-4775-80c5-194738ac929f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}